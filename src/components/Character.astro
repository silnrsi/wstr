---

// Character component
// Display a Unicode character with its Unicode Scalar Value and name
// The character is displayed as a string, the USV as a hexadecimal number, and the name in small caps
//
// Syntax:
// See https://writingsystems.info/reference/component-reference/#character-component

import { getCharacter, getCharacterName, ERROR_INVALID_USV } from '../utils/coredata_access';

const componentName = 'Character';
const { usv, char, options } = Astro.props;
// console.debug(`${componentName} component original props:`, { usv, char, options });

// Check that all options are valid
const validOptions = ['usv', 'char', 'name'];

const optionsArray = options ? options.split(',') : ['char', 'usv', 'name'];
// console.debug(`${componentName} component props:`, { usv, char, optionsArray });
optionsArray.forEach((opt: string) => {
  if (!validOptions.includes(opt.trim())) {
    throw new Error(`${componentName} component: invalid option "${opt}". Valid options are: ${validOptions.join(', ')}`);
  }
});

// Check that either usv or char is provided
if (!usv && !char) {
  throw new Error(`${componentName} component: requires either "usv" or "char" property.`);
}

let usvValue = usv;
// If the char property is provided, derive usv from it
if (char) {
  usvValue = char.codePointAt(0).toString(16).toUpperCase().padStart(4, '0');
}

let characterName = await getCharacterName(usvValue);
const character = characterName !== ERROR_INVALID_USV ? String.fromCodePoint(parseInt(usvValue, 16)) : '[?]';
if (characterName === ERROR_INVALID_USV) {
  throw new Error(`${componentName} component: invalid USV "${usvValue}".`);
}
// console.debug(`${componentName} component data:`, { usvValue, characterName, character });

// Decide whether we need to include a dotted circle with combining marks
const characterInfo = await getCharacter(`character_usv = '${usvValue}'`);
// console.debug(`${componentName} component characterInfo:`, characterInfo);
let characterResult = character;
if (characterInfo && characterInfo.character_category.startsWith('M') && optionsArray.includes('char')) {
  // Combining mark, include dotted circle
  const dottedCircle = String.fromCodePoint(0x25CC);
  characterResult = `${dottedCircle}${character}`;
}

// Concatenate the parts based on options, separated by spaces
const parts = [];
if (optionsArray.includes('usv')) {
  parts.push(`<span class="uni-char-metadata">U+${usvValue}</span>`);
}
if (optionsArray.includes('char') && characterResult) {
  parts.push(characterResult);
}
if (optionsArray.includes('name')) {
  parts.push(`<span class="uni-char-metadata">${characterName}</span>`);
}
const output = parts.join(' ');
// console.debug(`${componentName} component output: "${output}"`);

---
<style>
  .character-component {
    display: inline;
  }
  </style>
  <span class='character-component' set:html={output}/>