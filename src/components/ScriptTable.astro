---

// filepath: /workspaces/wstr-sample-site/src/components/ScriptTable.astro

import { getScripts } from '../utils/coredata_access';

const { filter, order, caption } = Astro.props;
// console.log('ScriptTable props:', { filter, order, caption });

// Parse the filter property into SQL WHERE conditions
let whereExpression = '';
if (filter) {
  const conditions = filter.split(',').map((pair: string) => {
    const [key, value] = pair.split('=', 2) as [string, string?];
    if (value?.includes('|')) {
      // Handle multiple values (e.g., "value1|value2|value3")
      const values = value.split('|').map((v) => `'${v.trim()}'`).join(', ');
      return `${key.trim()} IN (${values})`;
    } else {
      // Handle single value
      return `${key.trim()} = '${value?.trim()}'`;
    }
  });
  whereExpression = `${conditions.join(' AND ')}`;
}

// Fetch the filtered scripts from the database
// console.log('Query:', query);
const scripts = await getScripts(whereExpression, order);
if (!scripts || scripts.length === 0) {
  throw new Error('No scripts found matching the filter criteria.');
}
---
<style>
  .caption {
    font-size: 0.8em;
    font-style: italic;
    text-align: left;
  }
</style>

<table>
  <thead>
    <tr>
      <th>Script Code</th>
      <th>Script Name</th>
      <th>Script Type</th>
      <th>Script Family</th>
    </tr>
  </thead>
  <tbody>
    {scripts.map((script) => (
      <tr>
        <td>{script.script_code}</td>
        <td>{script.script_name}</td>
        <td>{script.script_type}</td>
        <td>{script.script_family}</td>
      </tr>
    ))}
  </tbody>
</table>
{caption && <div class="caption">{caption}</div>}