---
import { db } from 'astro:db';

const { table, fields, filter, order, caption } = Astro.props;

// Ensure `fields` is explicitly typed as a string
const parsedFields = (fields as string).split(',').map((pair: string) => {
  const [field, title] = pair.split('=').map(str => str.trim());
  return { field, title: title || field }; // Use the field name as the title if no custom title is provided
});

// Extract the field names for the SQL query
const fieldNames = parsedFields.map(f => f.field).join(', ');

// Construct the SQL query
const query = `
  SELECT ${fieldNames}
  FROM ${table}
  ${filter ? `WHERE ${filter}` : ''}
  ${order ? `ORDER BY ${order}` : ''}
`;

// Execute the query and fetch the results
const rows: any[] = await db.all(query);
db.select()
---

<style>
  .record-count {
    margin-top: 0.5em;
    font-size: 0.9em;
    font-style: italic;
  }
  .caption {
    font-size: 0.8em;
    font-style: italic;
    text-align: left;
  }
</style>

<div>
  <table>
    <thead>
      <tr>
        {parsedFields.map(({ title }) => (
          <th>{title}</th>
        ))}
      </tr>
    </thead>
    <tbody>
      {rows.map(row => (
        <tr>
          {parsedFields.map(({ field }) => (
            <td>{row[field]}</td>
          ))}
        </tr>
      ))}
    </tbody>
  </table>
  {caption && <div class="caption">{caption}</div>}
  <!-- <div class="record-count">Total records: {rows.length}</div> -->
</div>